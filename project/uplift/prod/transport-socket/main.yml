- name: Setup stateful services
  hosts: _manual
  become: true
  vars:
    vault_secrets: "{{ lookup('community.hashi_vault.hashi_vault', 'secret={{ identifier }}/data/ts') }}"
  tasks:
    - include_vars: ../vars/vars.yml    

    - name: Create a bff dir if it does not exist
      ansible.builtin.file:
        path: "/{{ identifier }}-ts"
        state: directory
        mode: '0755'

    - name: Generate .env file from vault lookup
      copy:
        dest: "/{{ identifier }}-ts/.env"
        content: |
          {% for key, value in vault_secrets.items() %}
          {{ key }}={{ value }}
          {% endfor %}   

    - name: Copy file from host to machine
      copy:
        src: "{{ playbook_dir }}/docker-compose.yml"
        dest: "/{{ identifier }}-ts/docker-compose.yml"
        env_file: "/{{ identifier }}-ts/.env"

    - name: Create and start services
      community.docker.docker_compose:
        project_src: "/{{ identifier }}-ts/"
      register: output

    - debug:
        var: output

- name: Create Docker service on Swarm cluster
  hosts: _manager
  become: true
  vars:
    service_name: "{{ identifier }}-ts"
    image_name: ghcr.io/up-lift/transport-socket
    image_tag: prod
    replicas: 1
    container_port: 3000
  tasks:
    - include_vars: ../vars/vars.yml    

    - name: Create Docker service
      docker_swarm_service:
        name: "{{ service_name }}"
        image: "{{ image_name }}:{{ image_tag }}"
        replicas: "{{ replicas }}"
        networks:
          - communication
        placement:
          constraints:
            - node.labels.node_vm_type == non_gpu
            - node.role == worker
        force_update: yes
        env:
          "{{ lookup('community.hashi_vault.hashi_vault', 'secret={{ identifier }}/data/ts') }}"
        state: present
    
    - name: Register middleware host with variable
      add_host:
        name: "MIDDLEWARE_HOST"
        service_name: "{{ service_name }}"
        container_port: "{{ container_port }}"

- name: Setup nginx config for trasnport-socket
  hosts: _manager:_worker:_worker_gpu
  become: true
  vars:
    service_name: "{{ hostvars['MIDDLEWARE_HOST']['service_name'] }}"
    service_port: "{{ hostvars['MIDDLEWARE_HOST']['container_port'] }}"
    proxy_address: "http://{{ service_name }}"
    config: ["proxy_http_version 1.1;","proxy_set_header Upgrade $http_upgrade;", "proxy_set_header Connection "upgrade";", "proxy_read_timeout 600;", "proxy_connect_timeout 600;", "proxy_send_timeout 600;"]
    upstream: true
    use_https: true
  tasks:
    - name: Create a /nginx directory
      ansible.builtin.file:
        path: /nginx
        state: directory
        mode: '0755'

    - name: Create a /nginx/conf.d directory
      ansible.builtin.file:
        path: /nginx/conf.d
        state: directory
        mode: '0755'

    - name: generate a nginx conf file
      template:
        src: "~/devops/templates/nginx-v2.conf.j2"
        dest: /nginx/conf.d/{{ service_name }}.conf

    - name: Run nginx reload command on every running nginx container
      shell: |
        docker exec $(docker ps -q -f name=nginx) nginx -s reload
      ignore_errors: yes
      register: result
      retries: 3
      delay: 10
      until: result is not failed
