- name: Setup stateful services
  hosts: _manager:_worker:_worker_gpu
  become: true
  vars:
    vault_secrets: "{{ lookup('community.hashi_vault.hashi_vault', 'secret={{ identifier }}/data/app') }}"
  tasks:
    - include_vars: ../vars/vars.yml

    - name: Create a app dir if it does not exist
      ansible.builtin.file:
        path: "/{{ identifier }}-app"
        state: directory
        mode: '0755'

    - name: Clone repository
      ansible.builtin.git:
        repo: https://github.com/RahatBot/app
        dest: "/{{ identifier }}-app/app"
        single_branch: yes
        version: feat-docker
 
    - name: Generate .env file from vault lookup
      copy:
        dest: "/{{ identifier }}-app/app/.env"
        content: |
          {% for key, value in vault_secrets.items() %}
          {{ key }}={{ value }}
          {% endfor %}  
    
    - name: Build an image 
      docker_image:
        build:
          path: "/{{ identifier }}-app/app/"
          args: 
            NEXT_PUBLIC_BASE_URL: "{{ lookup('community.hashi_vault.hashi_vault', 'secret={{ identifier }}/data/app:NEXT_PUBLIC_BASE_URL') }}"
        name: "{{ identifier }}-app"
        tag: latest
        source: build
        force_source: yes

- name: Create Docker service on Swarm cluster
  hosts: _manager
  become: true
  vars:
    service_name: "{{ identifier }}-app"
    image_name: "{{ identifier }}-app"
    image_tag: "latest"
    replicas: 1
    container_port: 3000
  tasks:
    - include_vars: ../vars/vars.yml

    - name: Create Docker service
      docker_swarm_service:
        name: "{{ service_name }}"
        image: "{{ image_name }}:{{ image_tag }}"
        replicas: "{{ replicas }}"
        networks:
          - communication
        placement:
          constraints:
            - node.role == worker
        force_update: yes
        env:
          "{{ lookup('community.hashi_vault.hashi_vault', 'secret={{ identifier }}/data/app') }}"
        state: present

    - name: Register middleware host with variable
      add_host:
        name: "MIDDLEWARE_HOST"
        service_name: "{{ service_name }}"
        container_port: "{{ container_port }}"

    - name: Sleep for 5 seconds and continue with play
      ansible.builtin.wait_for:
        timeout: 5
      delegate_to: localhost

- name: Setup nginx config for bff
  hosts: _manager:_worker:_worker_gpu
  become: true
  vars:
    service_name: "{{ hostvars['MIDDLEWARE_HOST']['service_name'] }}"
    service_port: "{{ hostvars['MIDDLEWARE_HOST']['container_port'] }}"
    upstream: true
    proxy_address: "http://{{ service_name }}"
    domain_name: "{{ hostvars['MIDDLEWARE_HOST']['service_name'] }}.chatwithpdf.aitools.samagra.io"
    config: ["client_max_body_size 100M;", "proxy_read_timeout 600;", "proxy_connect_timeout 600;", "proxy_send_timeout 600;"]
    use_https: true
  tasks: 
    - name: Create a /nginx directory
      ansible.builtin.file:
        path: /nginx
        state: directory
        mode: '0755'

    - name: Create a /nginx/conf.d directory
      ansible.builtin.file:
        path: /nginx/conf.d
        state: directory
        mode: '0755'

    - name: generate a nginx conf file
      template:
        src: "~/devops/templates/nginx-v3.conf.j2"
        dest: /nginx/conf.d/{{ service_name }}.conf

    - name: Run nginx reload command on every running nginx container
      shell: |
        docker exec $(docker ps -q -f name=nginx) nginx -s reload
      ignore_errors: yes
    

