- name: Setup stateful services
  hosts: _manual
  become: true
  vars:
    vault_secrets: "{{ lookup('community.hashi_vault.hashi_vault', 'secret={{ identifier }}/data/pdf-parser_redis') }}"
  tasks:
    - include_vars: ../vars/vars.yml

    - name: Create a pdf-parser dir if it does not exist
      ansible.builtin.file:
        path: "/{{ identifier }}-pdf-parser"
        state: directory
        mode: '0755'

    - name: Copy file from host to machine
      copy:
        src: "{{ playbook_dir }}/docker-compose.yml"
        dest: "/{{ identifier }}-pdf-parser/docker-compose.yml"
        force: yes


    - name: Generate .env file from vault lookup
      copy:
        dest: "/{{ identifier }}-pdf-parser/.env"
        content: |
          {% for key, value in vault_secrets.items() %}
          {{ key }}={{ value }}
          {% endfor %}          

    - name: Create and start services
      community.docker.docker_compose:
        project_src: "/{{ identifier }}-pdf-parser/"
        env_file: "/{{ identifier }}-pdf-parser/.env"
      register: output

    - debug:
        var: output

- name: Pull latest image for pdf-parser
  hosts: _worker_gpu
  become: true
  vars:
    image_name: "ghcr.io/{{ org }}/pdf-parser"
    image_tag: "{{ env }}"
  tasks:
    - include_vars: ../vars/vars.yml

    - name: Login to Github Packages Registry
      community.docker.docker_login:
        registry_url: ghcr.io/
        username: "{{ lookup('community.hashi_vault.hashi_vault', 'secret={{ identifier }}/data/common:GITHUB_USERNAME') }}"
        password: "{{ lookup('community.hashi_vault.hashi_vault', 'secret={{ identifier }}/data/common:GITHUB_TOKEN') }}"

    - name: pull an image
      docker_image:
        name: "{{ image_name }}:{{ env }}"
        source: "pull"
        force_source: yes
      register: output
      

    - debug:
        var: output

- name: Create Docker service on Swarm cluster
  hosts: _manager
  become: true
  vars:
    service_name: "{{ identifier }}-pdf-parser-celery-worker"
    image_name: "ghcr.io/{{ org }}/pdf-parser"
    image_tag: "{{ env }}"
    replicas: 1
    container_port: 8000
  tasks:
    - include_vars: ../vars/vars.yml

    - name: Create Docker service
      docker_swarm_service:
        name: "{{ service_name }}"
        image: "{{ image_name }}:{{ env }}"
        replicas: "{{ replicas }}"
        networks:
          - communication
        placement:
          constraints:
            - node.labels.node_vm_type == gpu
        force_update: yes
        command: celery -A worker worker --loglevel=info
        env:
          "{{ lookup('community.hashi_vault.hashi_vault', 'secret={{ identifier }}/data/pdf-parser') }}"
        state: present

    
- name: Create Docker service on Swarm cluster
  hosts: _manager
  become: true
  vars:
    service_name: "{{ identifier }}-pdf-parser"
    image_name: "ghcr.io/{{ org }}/pdf-parser"
    image_tag: "{{ env }}"
    replicas: 1
    container_port: 8000
  tasks:
    - include_vars: ../vars/vars.yml

    - name: Create Docker service
      docker_swarm_service:
        name: "{{ service_name }}"
        image: "{{ image_name }}:{{ env }}"
        replicas: "{{ replicas }}"
        networks:
          - communication
        placement:
          constraints:
            - node.labels.node_vm_type == gpu
        force_update: yes
        command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload
        env:
          "{{ lookup('community.hashi_vault.hashi_vault', 'secret={{ identifier }}/data/pdf-parser') }}"
        state: present

    - name: Register middleware host with variable
      add_host:
        name: "MIDDLEWARE"
        service_name: "{{ service_name }}"
        container_port: "{{ container_port }}"

    - name: Sleep for 5 seconds and continue with play
      ansible.builtin.wait_for:
        timeout: 5
      delegate_to: localhost

- name: Setup nginx config for pdf-parser
  hosts: _manager:_worker:_worker_gpu
  become: true
  vars:
    service_name: "pravrishti-dev-pdf-parser"
    service_port: "8000"
    upstream: true
    proxy_address: "http://{{ service_name }}"
    config: ["client_max_body_size 100M;", "proxy_read_timeout 600;", "proxy_connect_timeout 600;", "proxy_send_timeout 600;"]
    use_https: true
  tasks: 
    - name: Create a /nginx directory
      ansible.builtin.file:
        path: /nginx
        state: directory
        mode: '0755'

    - name: Create a /nginx/conf.d directory
      ansible.builtin.file:
        path: /nginx/conf.d
        state: directory
        mode: '0755'

    - name: generate a nginx conf file
      template:
        src: "~/devops/templates/nginx-v2.conf.j2"
        dest: /nginx/conf.d/{{ service_name }}.conf

    - name: Run nginx reload command on every running nginx container
      shell: |
        docker exec $(docker ps -q -f name=nginx) nginx -s reload
      ignore_errors: yes